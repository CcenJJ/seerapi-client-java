apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

group = 'com.imsweb'
version = '1.1-SNAPSHOT'
description = 'Java client library for SEER*API'

// UTF-8 for all compilation tasks
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// plugins
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.7'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.0'
    }
}

// repositories
repositories {
    mavenCentral()
}

// load other gradle files
apply from: 'gradle/publish.gradle'

dependencies {
    compile 'org.glassfish.jersey.core:jersey-client:2.7'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.7'

    testCompile 'junit:junit:4.11'
}

// build jar file
jar {
    // specify the archive name; otherwise the version is appended to the war file
    archiveName = 'seerapi-java.jar'

    manifest {
        attributes('Implementation-Title': 'SEER*API Java Client',
                'Implementation-Version': version,
                'Implementation-Vendor': group,
                'Created-By': System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
        )
    }
}

// checkstyle plugin settings
checkstyle {
    ignoreFailures = true
    configFile = file("config/checkstyle/checkstyle.xml")
}

// findbugs plugin settings
findbugs {
    toolVersion = '3.0.0'
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    effort = 'max'
    excludeFilter = file("config/findbugs/findbugs-exclude.xml")
}

// code coverage plugin
jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

// simple task to return the version
task getVersion << {
    println version
}

// Gradle wrapper, this allows to build the project without having to install Gradle!
task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}
